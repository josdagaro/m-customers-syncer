name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    environment: deploy
    runs-on: ubuntu-latest
    env:
      REGION: "us-east-1"
      REPOSITORY: "synchronizer"
      SERVICE_NAME: "synchronizer"
      CLUSTER_NAME: "my-cluster"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Start image scan
      id: start-scan
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ecr start-image-scan --repository-name $REPOSITORY --image-id imageTag=$IMAGE_TAG

    - name: Wait for image scan to complete and get findings
      id: get-scan-findings
      env:
        REGION: ${{ env.REGION }}
        REPOSITORY: ${{ env.REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        while true; do
          SCAN_STATUS=$(aws ecr describe-image-scan-findings --repository-name $REPOSITORY --image-id imageTag=$IMAGE_TAG --region $REGION | jq -r '.imageScanStatus.status')
          echo "Current scan status: $SCAN_STATUS"
          if [ "$SCAN_STATUS" == "COMPLETE" ]; then
            aws ecr describe-image-scan-findings --repository-name $REPOSITORY --image-id imageTag=$IMAGE_TAG --region $REGION > scan-findings.json
            break
          elif [ "$SCAN_STATUS" == "FAILED" ]; then
            echo "Image scan failed."
            exit 1
          else
            sleep 10
          fi
        done

    - name: Check for critical and high vulnerabilities
      run: |
        CRITICAL_HIGH=$(jq '[.imageScanFindings.findings[] | select(.severity == "CRITICAL" or .severity == "HIGH")] | length' scan-findings.json)
        if [ "$CRITICAL_HIGH" -gt 0 ]; then
          echo "There are $CRITICAL_HIGH critical/high vulnerabilities. Please fix them before deployment."
        fi

    - name: Create new task definition revision
      run: |
        aws_account_id=$(aws sts get-caller-identity --query Account --output text)
        sed -e "s/<AWS_ACCOUNT_ID>/$aws_account_id/g" \
            -e "s/<AWS_REGION>/${{ env.REGION }}/g" \
            -e "s/<IMAGE_VERSION>/${{ github.sha }}/g" \
            task-definition.json > ecs_task_definition.json

        aws ecs register-task-definition --cli-input-json file://ecs_task_definition.json

    - name: Update ECS service
      run: |
        cluster_name=${{ env.CLUSTER_NAME }}
        task_definition=$(aws ecs list-task-definitions --family-prefix syncer --status ACTIVE --sort DESC --max-items 1 --query "taskDefinitionArns[0]" --output text)
        aws ecs update-service --cluster $cluster_name --service ${{ env.SERVICE_NAME }} --task-definition $task_definition --desired-count 0
